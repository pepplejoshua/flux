# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'
strategy:
  matrix:
    Python38:
      python.version: '3.9.1'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: |
    pip install --upgrade pip
    pip install pytest pytest-azurepipelines termcolor colorama
  displayName: 'Install dependencies'

- script: |
    pytest -s --exp='400' --etype='int' --ln='400'
  displayName: 'Literal expression'

- script: |
    pytest -s --exp='-250' --etype='int' --ln='-250'
  displayName: 'Negative unary operators on literal expression'

- script: |
    pytest -s --exp='+500' --etype='int' --ln='+500'
  displayName: 'Positive unary operators on literal expression'

- script: |
    pytest -s --exp='16' --etype='int' --ln='2 ^ 4'
  displayName: 'Exponent binary expression'

- script: |
    pytest -s --exp='12' --etype='int' --ln='3 * 4'
  displayName: 'Multiplication binary expression'

- script: |
    pytest -s --exp='420' --etype='int' --ln='210 + 210'
  displayName: 'Addition binary expression'

- script: |
    pytest -s --exp='4' --etype='int' --ln='1000 - 996'
  displayName: 'Subtraction binary expression'

- script: |
    pytest -s --exp='8' --etype='int' --ln='89 % 9'
  displayName: 'Modulo binary expression'

- script: |
    pytest -s --exp='21' --etype='int' --ln='2 -- 2 * 2 + 5 + 2* 5'
  displayName: 'Complex binary arguments'

- script: |
    pytest -s --exp='35' --etype='int' --ln='(2 - 2) * 2 + ((5 + 2) * 5)'
  displayName: 'Parenthesized arguments'
  
- script: |
    pytest -s --exp='4' --etype='int' --ln='+1*(2^(-2*(-1)))'
  displayName: 'Combination of all expression types'

- script: |
    pytest -s --etype='int' --exp='1' --ln='+--+1'
  displayName: 'Multiple unary operators on literal'

- script: |
    pytest -s --etype='bool' --exp='True' --ln='true'
  displayName: 'Boolean literal true'

- script: |
    pytest -s --etype='bool' --exp='False' --ln='false'
  displayName: 'Boolean literal false'

- script: |
    pytest -s --etype='bool' --exp='True' --ln='1 == 1 and 2 == 2'
  displayName: 'Complex Boolean comparator expression'

- script: |
    pytest -s --etype='bool' --exp='True' --ln='(1 == (5-4)) and (1 != 100-22)'
  displayName: 'Parenthesized Boolean comparator expression'

- script: |
    pytest -s --etype='bool' --exp='True' --ln='(true || false) or (false && true) || (not false) or (!true)'
  displayName: 'Word and symbol boolean comparators expression'
